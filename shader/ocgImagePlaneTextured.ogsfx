#version 430

// World-view-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;

// The solid color uniform, its default value and several extra
// parameters
uniform vec4 gSolidColor : DIFFUSE = {1, 1, 1, 1};

// Display mode, what type of channels to display to the user.
#define DISPLAY_MODE_RGBA (0)
#define DISPLAY_MODE_RGB  (1)
#define DISPLAY_MODE_R    (2)
#define DISPLAY_MODE_G    (3)
#define DISPLAY_MODE_B    (4)
#define DISPLAY_MODE_A    (5)
uniform int gDisplayMode = 0;

// Display parameters
uniform vec4 gDisplayColor = {1, 1, 1, 1};
uniform float gDisplayAlpha = 1.0;
uniform float4x4 gDisplaySaturationMatrix < string UIWidget = "None"; >;
uniform float gDisplayExposure = 1.0;
uniform float gDisplayGamma = 1.0;
uniform float gDisplaySoftClip = 0.0;
uniform bool gDisplayUseDrawDepth = false;
uniform float gDisplayDrawDepth = 100.0;

// Matrix used to multiply colors, to perform color (linear)
// grading/correction.
uniform float4x4 gImageColorMatrix < string UIWidget = "None"; >;

// The main image texture displaying RGBA values to the user.
uniform texture2D gImageTexture
<
    string ResourceName = "";
    string ResourceType = "2D";
>;

uniform sampler2D gImageTextureSampler = sampler_state
{
    Texture = <gImageTexture>;
    TEXTURE_MIN_FILTER = NEAREST;
    TEXTURE_MAG_FILTER = NEAREST;
    TEXTURE_WRAP_S = CLAMP_TO_EDGE;
    TEXTURE_WRAP_T = CLAMP_TO_EDGE;
    TEXTURE_WRAP_R = CLAMP_TO_EDGE;
};

// The 3D LUT texture to transform the texture colours.
uniform bool g3dLutEnable = false;
uniform int g3dLutEdgeSize = 0;
uniform texture3D g3dLutTexture
<
    string ResourceName = "";
    string ResourceType = "3D";
>;

uniform sampler3D g3dLutTextureSampler = sampler_state
{
    Texture = <g3dLutTexture>;
    TEXTURE_MIN_FILTER = NEAREST;
    TEXTURE_MAG_FILTER = NEAREST;
    TEXTURE_WRAP_S = CLAMP_TO_EDGE;
    TEXTURE_WRAP_T = CLAMP_TO_EDGE;
    TEXTURE_WRAP_R = CLAMP_TO_EDGE;
};

// The 3D LUT texture to preview the colour operations.
uniform bool gColorOpsLutEnable = false;
uniform int gColorOpsLutEdgeSize = 0;
uniform texture3D gColorOps3dLutTexture
<
    string ResourceName = "";
    string ResourceType = "3D";
>;

uniform sampler3D gColorOps3dLutTextureSampler = sampler_state
{
    Texture = <gColorOps3dLutTexture>;
    TEXTURE_MIN_FILTER = NEAREST;
    TEXTURE_MAG_FILTER = NEAREST;
    TEXTURE_WRAP_S = CLAMP_TO_EDGE;
    TEXTURE_WRAP_T = CLAMP_TO_EDGE;
    TEXTURE_WRAP_R = CLAMP_TO_EDGE;
};

uniform texture1D gColorOps1dLutTexture
<
    string ResourceName = "";
    string ResourceType = "1D";
>;

uniform sampler1D gColorOps1dLutTextureSampler = sampler_state
{
    Texture = <gColorOps1dLutTexture>;
    TEXTURE_MIN_FILTER = NEAREST;
    TEXTURE_MAG_FILTER = NEAREST;
    TEXTURE_WRAP_S = CLAMP_TO_EDGE;
    TEXTURE_WRAP_T = CLAMP_TO_EDGE;
    TEXTURE_WRAP_R = CLAMP_TO_EDGE;
};

// Transforms to be applied to the vertices in various ways.
uniform float4x4 gRescaleTransform < string UIWidget = "None"; >;
uniform float4x4 gGeometryTransform < string UIWidget = "None"; >;

attribute vs_input
{
    vec3 in_position : POSITION;
    vec2 in_texcoord : TEXCOORD0;
};

attribute vs_to_ps
{
    vec2 texcoord;
};

attribute ps_output
{
    vec4 out_color : COLOR0;
}

GLSLShader VS
{
    void main()
    {
        gl_Position = gWVPXf * gGeometryTransform * gRescaleTransform * vec4(in_position, 1);
        vsOut.texcoord.x = in_texcoord.x;
        vsOut.texcoord.y = in_texcoord.y;
    }
}

GLSLShader PS
{
    // Based on DJV's soft-clip function:
    // https://github.com/darbyjohnston/DJV/blob/master/etc/Shaders/GL4_1/djvRender2DFragment.glsl#L98
    //
    // SPDX-License-Identifier: BSD-3-Clause
    // Copyright (c) 2004-2020 Darby Johnston
    // All rights reserved.
    vec3 apply_soft_clip(vec3 in_color, float value)
    {
        float tmp = 1.0 - value;
        if (in_color.r > tmp)
            in_color.r = tmp + (1.0 - exp(-(in_color.r - tmp) / value)) * value;
        if (in_color.g > tmp)
            in_color.g = tmp + (1.0 - exp(-(in_color.g - tmp) / value)) * value;
        if (in_color.b > tmp)
            in_color.b = tmp + (1.0 - exp(-(in_color.b - tmp) / value)) * value;
        return in_color;
    }

    void main()
    {
        vec4 tex_color = texture2D(gImageTextureSampler, psIn.texcoord);

        // Color Space
        if (g3dLutEnable) {
            float m = float(g3dLutEdgeSize-1) / float(g3dLutEdgeSize);
            float b = 1.0 / (2.0 * float(g3dLutEdgeSize));
            tex_color = vec4(
                texture3D(g3dLutTextureSampler, m * tex_color.rgb + b).rgb,
                tex_color.a);
        }

        // Color Ops
        if (gColorOpsLutEnable) {
            float m = float(gColorOpsLutEdgeSize-1) / float(gColorOpsLutEdgeSize);
            float b = 1.0 / (2.0 * float(gColorOpsLutEdgeSize));

            float coord_1d = m * tex_color.a + b;
            float alpha =
                texture1D(gColorOps1dLutTextureSampler,
                          coord_1d).r;

            vec3 coord_3d = m * tex_color.rgb + b;
            tex_color = vec4(
                texture3D(gColorOps3dLutTextureSampler,
                          m * tex_color.rgb + b).rgb,
                alpha);
        }

        // Manipulate the colors of the texture.
        vec4 final = gSolidColor * gImageColorMatrix * tex_color;

        final *= gDisplayColor;
        final *= gDisplaySaturationMatrix;

        // make transparent, with pre-mult.
        final *= gDisplayAlpha;

        if (gDisplayMode == DISPLAY_MODE_RGBA) {
            out_color = final;
        } else if (gDisplayMode == DISPLAY_MODE_RGB) {
            out_color = vec4(final.rgb, 1.0);
        } else if (gDisplayMode == DISPLAY_MODE_R) {
            out_color = vec4(final.rrr, 1.0);
        } else if (gDisplayMode == DISPLAY_MODE_G) {
            out_color = vec4(final.ggg, 1.0);
        } else if (gDisplayMode == DISPLAY_MODE_B) {
            out_color = vec4(final.bbb, 1.0);
        } else if (gDisplayMode == DISPLAY_MODE_A) {
            out_color = vec4(final.aaa, 1.0);
        }

        // Expose and gamma correct the color to be displayed to the
        // user.
        out_color = vec4(out_color.rgb * pow(2.0, gDisplayExposure), out_color.a);
        float gamma = 1.0 / gDisplayGamma;
        out_color.r = pow(out_color.r, gamma);
        out_color.g = pow(out_color.g, gamma);
        out_color.b = pow(out_color.b, gamma);
        out_color = vec4(apply_soft_clip(out_color.rgb, gDisplaySoftClip), out_color.a);
        // Override the 'draw depth', which impacts the how objects
        // will occlude with the image plane.
        gl_FragDepth = gl_FragCoord.z;
        if (gDisplayUseDrawDepth == true) {
            // This value should never got to exactly 1.0 but should
            // instead almost reach 1.0, but never quite getting
            // there.
            gl_FragDepth = gDisplayDrawDepth / 100.1;
        }
    }
}

technique Main
{
    pass p0
    {
        VertexShader (in vs_input, out vs_to_ps vsOut) = VS;
        PixelShader (in vs_to_ps psIn, out ps_output) = PS;
    }
}
